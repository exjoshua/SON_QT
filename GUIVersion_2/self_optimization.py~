#!/usr/lib/python3.4
# -*-coding: UTF-8 -*-

import numpy as np
import math
import string
from scipy import interpolate
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D


# 二进制到十进制
def bin2dec(string_num):
    return int(string_num, 2)


# 二进制数组到十进制的转换
def Binary_Dec(B):
    Temp_str = str(B[0])
    for i in range(1, len(B)):
        str_multi = [Temp_str, str(B[i])]
        Temp_str = ''
        str_multi = Temp_str.join(str_multi)     # 直接通过(+)操作符连接
        Temp_str = str_multi[:]
    return bin2dec(Temp_str)


# 路损模型
def Path_loss(d):
    A = 100
    n = 2.5
    path_loss = A + 10 * n * math.log10(d)
    return path_loss


# 覆盖率计算
def Coverage_rate(RS_Pt, Locations, M, RSRP0, W, K):
    L = 0.6
    H = 1.0
    D = np.zeros((W, K, M))
    path_loss = np.zeros((W, K, M))
    RSRPn_temp = np.zeros((W, K, M))
    RSRPn = np.zeros((W, K))
    N0 = W * K
    Ns = 0
    for m in range(M):
        for w in range(W):
            for k in range(K):
                D[w][k][m] = np.linalg.norm([L * (w - Locations[m][0]), L * (k - Locations[m][1]), (Locations[m][2]-H)],
                                            2) / 1000
                path_loss[w][k][m] = Path_loss(D[w][k][m])
                RSRPn_temp[w][k][m] = RS_Pt[m, 0] - path_loss[w][k][m]
    for w in range(W):
        for k in range(K):
            RSRPn[w, k] = max(RSRPn_temp[w, k, :])
            if RSRPn[w, k] >= RSRP0:
                Ns = Ns+1

    Cover_rate = Ns / N0
    return RSRPn, Cover_rate


# RS与PDSCH的功率分配方案
def RS_PDSCH_allocation(Pt, N_PRB, Sch_Num):
    F = 10 * math.log10(N_PRB * 12)
    E_A = Pt-F
    PA = [-6, -4.77, -3, -1.77, 0, 1, 2, 3]
    E_RS = E_A - PA[Sch_Num]
    RS_Pt = E_RS
    return RS_Pt

def main_operation():
    M = 3
    N = 50
    MaxPRB = N * 0.40
    W = 28
    K = 28
    RSRP0 = -105  # 单位 dBm(-105);
    sigma = 0.95  # 覆盖率门限

    Locations = [[10, 4, 1.5],
                 [22, 4, 1.5],
                 [18, 20, 1.5]]

    Pt0 = 10 * np.ones((1, M), int)  # 初始功率 10dBm

    RS_Sch = 4 * np.ones((1, M), int)  # PA = 0dB

    RS_Pt = np.zeros((M, 1))

    for m in range(M):
        RS_Pt[m, 0] = RS_PDSCH_allocation(Pt0[0, m], N, RS_Sch[0, m])

    [RSRPn, Cover_rate] = Coverage_rate(RS_Pt, Locations, M, RSRP0, W, K)

    delta_g = 1
    Delta_P = [0, delta_g, -delta_g, 0]

    # 假设上报的SINR为M*N维度 或CQI
    SINR = 10 * np.random.rand(M, N)
    S = SINR.copy()  # 进行备份

    # S = 100 * np.random.rand(M, N)

    S_best = np.random.randint(0, high=1, size=(M, N + 5))
    P = Pt0.copy()
    # P_Sch = np.zeros((1, M), int)
    P_Sch = np.random.randint(0, high=1, size=(M, 1))
    RS_Sch = np.zeros((M, 1), int)

    A3 = np.random.randint(0, high=1, size=(M, N))

    PRB_Count = np.zeros((M, 1), int)
    Ft3 = np.zeros((M, 1))

    for j in range(N):
        SINR_Temp = SINR[:, j]  # 某一列
        Idx = SINR_Temp.tolist().index(max(SINR_Temp))
        if PRB_Count[Idx] < MaxPRB:
            PRB_Count[Idx] = PRB_Count[Idx] + 1
            A3[Idx][j] = 1
        else:
            SINR[Idx][j] = 0
            SINR_Temp = SINR[0: M, j]
            Idx = SINR_Temp.tolist().index(max(SINR_Temp))
            if PRB_Count[Idx] < MaxPRB:
                PRB_Count[Idx] = PRB_Count[Idx] + 1
                A3[Idx][j] = 1
            elif PRB_Count[Idx] >= MaxPRB:
                SINR[Idx][j] = 0
                SINR_Temp = SINR[0: M, j]
                Idx = SINR_Temp.tolist().index(max(SINR_Temp))
            else:
                PRB_Count[Idx] = PRB_Count[Idx] + 1
                A3[Idx][j] = 1

    P_Binary = np.random.randint(0, high=2, size=(M, 5))  # 功率分配方案

    S0 = np.hstack((A3, P_Binary))  # S0 = [A3, P_Binary];

    for m in range(M):
        P_Sch[m, 0] = Binary_Dec(S0[m, N: N + 2])
        RS_Sch[m, 0] = Binary_Dec(S0[m, N + 2: N + 5])

    P_W = np.power(10 * np.ones((M, 1)), (P / 10 - 3 * np.ones((M, 1))))  # dBm转化为w
    EE0 = np.sum(np.sum(np.multiply(A3, S))) / np.sum(P_W)

    # 模拟退火参数
    e = math.pow(0.1, 40)
    L = 500
    at = 0.98
    T = 1000

    EE_temp = np.zeros((L, 1))
    EE = np.zeros((L, 1))
    count = -1
    n_opt = 0
    EE_max = EE0
    # print('*************************************************')
    # print(EE_max)

    for k in range(L):
        flag1 = 0
        flag2 = 0

        cN = np.random.randint(0, high=N, size=(1, 3))
        c5 = np.random.randint(0, high=5, size=(1, 2))

        cN_temp = sorted(cN[0])
        c5_temp = sorted(c5[0])
        cN1 = cN_temp[0]
        cN2 = cN_temp[1]
        cN3 = cN_temp[2]
        c51 = c5_temp[0]
        c52 = c5_temp[1]

        S0_temp = S0.copy()

        SN_temp0 = np.hstack((S0_temp[0:M, 0:cN1], S0_temp[0:M, cN3:cN3 + 1]))
        SN_temp1 = np.hstack((SN_temp0, S0_temp[0:M, cN1 + 1: cN2]))
        SN_temp2 = np.hstack((SN_temp1, S0_temp[0:M, cN1:cN1 + 1]))
        SN_temp3 = np.hstack((SN_temp2, S0_temp[0:M, cN2 + 1: cN3]))
        SN_temp4 = np.hstack((SN_temp3, S0_temp[0:M, cN2: cN2 + 1]))
        SN_temp5 = np.hstack((SN_temp4, S0_temp[0:M, cN3 + 1: N]))
        SN_temp6 = np.hstack((SN_temp5, S0_temp[0:M, N: N + c51]))
        SN_temp7 = np.hstack((SN_temp6, S0_temp[0:M, N + c52: N + c52 + 1]))
        SN_temp8 = np.hstack((SN_temp7, S0_temp[0:M, N + c51 + 1:N + c52]))
        SN_temp9 = np.hstack((SN_temp8, S0_temp[0:M, N + c51: N + c51 + 1]))
        SN_temp = np.hstack((SN_temp9, S0_temp[0:M, N + c52 + 1: N + 5]))
        SN = SN_temp.copy()

        P_Sch = np.random.randint(0, high=1, size=(M, 1))

        for m in range(M):
            P_Sch[m, 0] = Binary_Dec(SN[m, N:N + 2])
            P[0, m] = P[0, m] + Delta_P[P_Sch[m, 0]]
            if (P[0, m] >= 20) or (P[0, m] <= 0):
                P[0, m] = Pt0[0, m]
            RS_Sch[m, 0] = Binary_Dec(SN[m, N + 2: N + 5])
            RS_Pt[m, 0] = RS_PDSCH_allocation(P[0, m], N, RS_Sch[m, 0])
        print('*********************************************************************')
        print(P)
        [RSRPn, Cover_rate] = Coverage_rate(RS_Pt, Locations, M, RSRP0, W, K)#float数组
        # print('*********************************************************************')
        # print(RSRPn)

        for m in range(M):
            if (np.sum(SN[m, 0:N]) <= MaxPRB) and Cover_rate >= sigma:  # 公平性和覆盖率的要求
                flag1 = 1
            else:
                flag1 = 0
                break

        if flag1 == 1:
            for n in range(N):
                if np.sum(SN[:, n]) <= 1:
                    flag2 = 1
                else:
                    flag2 = 0
                    break

        if flag1 * flag2 == 1:
            RB_allocation = SN[:, 0:N]
            for m in range(M):
                P_Sch[m, 0] = Binary_Dec(SN[m, N: N + 2])
                RS_Sch[m, 0] = Binary_Dec(SN[m, N + 2: N + 5])

            P_W = np.power(10 * np.ones((M, 1)), (P / 10 - 3 * np.ones((M, 1))))  # dBm转化为w

            count = count + 1
            EE_temp[count, 0] = np.sum(np.sum(np.multiply(RB_allocation, S))) / np.sum(P_W)
            print('***********************************************************')
            print(EE_temp[count, 0])

        else:
            continue

        # 判断是否是可行解 ####

        df = EE_temp[count, 0] - EE_max
        print('***********************************************************')
        print(df)
        if df >= 0:
            S0 = SN.copy()
            EE_max = EE_temp[count, 0]
            n_opt = n_opt + 1
            EE[n_opt, 0] = EE_max
            S_best = SN.copy()
        elif np.exp(df / T) > np.random.rand(1):
            S0 = SN.copy()
            EE_max = EE_temp[count, 0]

        T = T * at
        if T < e:
            break

    #print(EE, S_best, EE_max, count)#要返回的数据
    np.savez("/home/noone/temp_conf.txt",RSRPn,S_best,EE_max,P,Cover_rate)
    print(S_best)
    print(EE_max)
    print(P)
    print(Cover_rate)
    #S_best_list=S_best.tolist()
    #EE_max_list = EE_max.tolist()
    #print(S_best_list)#都是list类型,要转换为string
    #print(type(S_best_list))
    #strL = []
    #for i in S_best_list:
    #    for j in i:
    #        strL.append(str(j))
    #print("RSRPn: ",RSRPn)
    #print(type(RSRPn))
    #print("Cover_rate: ",Cover_rate)
    #print(type(Cover_rate))#float数字
    #print("P: ", P)
    #print(type(P))
    #RSRPn_list = RSRPn.tolist()
    #P_list = P.tolist()
    #strR = []
    #strP = []
    #for i in RSRPn_list:
    #    for j in i:
    #        strR.append(str(j))
    #for i in P_list: 
    #   strP.append(str(i))
	# list转str并将S_best,EE_max,P,RSRPn,Coverrate等合并
    #best_S = ",".join(strL)
    #nRSRP = ",".join(strR)
    #sP = ",".join(strP)
    #EE_max_str = str(EE_max_list)
    #print(best_S)
    #print(EE_max_str)
    #send_conf = []
    #send_conf.append(best_S)
    #send_conf.append(EE_max_str)
    #send_conf.append(sP)
    #send_conf.append(nRSRP)
    #send_conf.append(str(Cover_rate))
    #strConf = ",".join(send_conf)
    #with open("/home/noone/temp_conf.txt","w") as f:
    #    f.write(strConf)
    #return str.encode(strConf)
if __name__ == '__main__':
    main_operation()




